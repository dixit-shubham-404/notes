"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[962],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var u=r.createContext({}),s=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=s(n.components);return r.createElement(u.Provider,{value:e},n.children)},m="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,u=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),m=s(t),d=a,f=m["".concat(u,".").concat(d)]||m[d]||c[d]||o;return t?r.createElement(f,i(i({ref:e},p),{},{components:t})):r.createElement(f,i({ref:e},p))}));function f(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=n,l[m]="string"==typeof n?n:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6207:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const o={},i="Enum and Pattern",l={unversionedId:"Languages/RUST/EnumAndPattern",id:"Languages/RUST/EnumAndPattern",title:"Enum and Pattern",description:"Defining Enums",source:"@site/docs/Languages/RUST/EnumAndPattern.md",sourceDirName:"Languages/RUST",slug:"/Languages/RUST/EnumAndPattern",permalink:"/notes/docs/Languages/RUST/EnumAndPattern",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Languages/RUST/EnumAndPattern.md",tags:[],version:"current",frontMatter:{},sidebar:"language_sidebar",previous:{title:"Structure",permalink:"/notes/docs/Languages/RUST/Struct"}},u={},s=[{value:"Defining Enums",id:"defining-enums",level:2},{value:"Example to define enum as a feild in struct",id:"example-to-define-enum-as-a-feild-in-struct",level:2},{value:"Storing variables inside Enums",id:"storing-variables-inside-enums",level:2},{value:"Option Enum",id:"option-enum",level:2},{value:"unwrap_or",id:"unwrap_or",level:2},{value:"Match expression for enum",id:"match-expression-for-enum",level:2},{value:"if let statement",id:"if-let-statement",level:2}],p={toc:s},m="wrapper";function c(n){let{components:e,...t}=n;return(0,a.kt)(m,(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"enum-and-pattern"},"Enum and Pattern"),(0,a.kt)("h2",{id:"defining-enums"},"Defining Enums"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"enum IpAddrKind{\n    V4,\n    V6\n}\n\nfn main()\n{\n    let four = IpAddrKind::V4;\n}\n")),(0,a.kt)("h2",{id:"example-to-define-enum-as-a-feild-in-struct"},"Example to define enum as a feild in struct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'enum IpAddrKind{\n    V4,\n    V6\n}\n\nstruct IpAdd{\n    kind: IpAddrKind,\n    addr: String\n}\n\nfn main(){\n    let localhost = IpAddr{\n        kind: IpAddrKind::V4,\n        addr: String::from("127.0.0.1")\n    };\n\n}\n')),(0,a.kt)("h2",{id:"storing-variables-inside-enums"},"Storing variables inside Enums"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'enum IpAddrKind{\n    V4(String),\n    V6(String)\n}\nenum A{\n    A1(i32, i32, u32)\n}\n\nfn main()\n{\n    let localhost = IpAddrKind::V4(String :: from("127.0.0.1"));\n    let a = A::A1(23,23,23);\n}\n')),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"option-enum"},"Option Enum"),(0,a.kt)("p",null,"Most programming languages has the variables which can have some values or can have null. Same is supported by RUST using option Enum."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"enum Option<T>{\n    Some(T),\n    None,\n}\n")),(0,a.kt)("p",null,"Optional enums are added by default in rust scope."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main()\n{\n    let some_number = Some(5);\n    let some_string = Some("a string");\n    let absent_number = None;\n}\n')),(0,a.kt)("h2",{id:"unwrap_or"},"unwrap_or"),(0,a.kt)("p",null,"If we want to unwrap any values from option enum we can use unwrap_or function.\nLets take an example and add one int to one option int."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main(){\n    let a = 5;\n    let b = Some(10);\n    let c = None;\n    println!("{}",a + b.unwrap_or(0));\n    println!("{}",a + c.unwrap_or(0));\n}\n')),(0,a.kt)("h2",{id:"match-expression-for-enum"},"Match expression for enum"),(0,a.kt)("p",null,"We can do pattern matching for in rust using match expression."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'enum Color{\n    red,\n    black,\n    green\n}\nfn main(){\n    let x = Color::red;\n}\nfn println!(x : Color){\n    match x{\n        Color : red => println!("red");\n        Color : black => println!("black");\n        Color : green => println!("green");\n    }\n}\n\n')),(0,a.kt)("p",null,"Lets take an example of default option int."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main(){\n    let five = Some(5);\n    println!("{}",plus_one(five));\n    let none = None;\n    println!("{}",plus_one(none));\n}\nfn plus_one(x : Option<i32>) -> Option<i32>{\n    match x {\n        Some(i) => Some(i+1),\n        None => None\n    }\n}\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Non exhaustive pattern matching will give error in rust. So to club all remaining cases we can use _ placeholder.")),(0,a.kt)("h2",{id:"if-let-statement"},"if let statement"),(0,a.kt)("p",null,"It can be used to compare directly compare option enum in if condition."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main(){\n    let x =  Some(4);\n    if let Some(4) == x {\n        println!("yoo");\n\n    }\n    else\n    {\n        println!("noo");\n    }\n}\n')))}c.isMDXComponent=!0}}]);