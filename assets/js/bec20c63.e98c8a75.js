"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[7086],{3905:(e,n,t)=>{t.d(n,{Zo:()=>o,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},o=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,o=u(e,["components","mdxType","originalType","parentName"]),m=c(t),g=a,d=m["".concat(s,".").concat(g)]||m[g]||p[g]||i;return t?r.createElement(d,l(l({ref:n},o),{},{components:t})):r.createElement(d,l({ref:n},o))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=g;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u[m]="string"==typeof e?e:a,l[1]=u;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const i={},l="Structure",u={unversionedId:"Languages/RUST/Struct",id:"Languages/RUST/Struct",title:"Structure",description:"User defined Struct with name feild",source:"@site/docs/Languages/RUST/Struct.md",sourceDirName:"Languages/RUST",slug:"/Languages/RUST/Struct",permalink:"/notes/docs/Languages/RUST/Struct",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Languages/RUST/Struct.md",tags:[],version:"current",frontMatter:{},sidebar:"language_sidebar",previous:{title:"Ownership in Rust",permalink:"/notes/docs/Languages/RUST/Ownership"}},s={},c=[{value:"User defined Struct with name feild",id:"user-defined-struct-with-name-feild",level:2},{value:"Tuple Struct",id:"tuple-struct",level:2},{value:"Method in Struct",id:"method-in-struct",level:2},{value:"Associative function in struct.",id:"associative-function-in-struct",level:2}],o={toc:c},m="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"structure"},"Structure"),(0,a.kt)("h2",{id:"user-defined-struct-with-name-feild"},"User defined Struct with name feild"),(0,a.kt)("p",null,"Example to creeate struct for the user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"struct User {\n    username : String,\n    email : String,\n    active : bool,\n    sign_in_count : u64\n}\n")),(0,a.kt)("br",null),(0,a.kt)("br",null),"Creating object of struct type",(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main()\n{\n    let user1 = User{\n        email = String::from("abc@gmail.com"),\n        username = String::from("abc"),\n        active = true,\n        sign_in_count = 1\n    };\n}\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"while defining object struct attribute can be defined in any order.")),(0,a.kt)("br",null),"We can access the values inside struct object using dot notation.",(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main()\n{\n    let user1 = User{\n        email = String::from("abc@gmail.com"),\n        username = String::from("abc"),\n        active = true,\n        sign_in_count = 1\n    };\n\n    let name = user1.username; // print -> abc\n    println!("{}",name);\n}\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,"we can make change the values inside object by making it mutable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main()\n{\n    let mut user1 = User{\n        email = String::from("abc@gmail.com"),\n        username = String::from("abc"),\n        active = true,\n        sign_in_count = 1\n    };\n\n    user1.username = String::from("cba"); \n    println!("{}",user1.username); // print -> cba\n}\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"We have to make entire object mutable we can't make just one feild mutable.")),(0,a.kt)("br",null),(0,a.kt)("p",null,"We can create object using a function too by passing values to it"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main()\n{\n    let user1 = build_user(String::from("abc"), String::from("abc@gmail.com"));\n}\n\nfn build_user(username : String, email : String) -> User{\n    User{\n        username : username,\n        email : email,\n        sign_in_count : 1,\n        active : true\n    }\n}\n')),(0,a.kt)("br",null),"When the name of function parameter and name of struct variable is same we can use the shorthand notation too.",(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main()\n{\n    let user1 = build_user(String::from("abc"), String::from("abc@gmail.com"));\n}\n\nfn build_user(username : String, email : String) -> User{\n    User{\n        username,\n        email,\n        sign_in_count : 1,\n        active : true\n    }\n}\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,"We can create one struct object from another struct object"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main()\n{\n    let user1 = build_user(String::from("abc"), String::from("abc@gmail.com"));\n    let user2 = User{\n        username : String::from("xyz"),\n        ..user1 // rest all thing will be copied from user 1\n    };\n\n    \n}\n\nfn build_user(username : String, email : String) -> User{\n    User{\n        username,\n        email,\n        sign_in_count : 1,\n        active : true\n    }\n}\n')),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"tuple-struct"},"Tuple Struct"),(0,a.kt)("p",null,"These are the structs without name feilds.\nExample -"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn main()\n{\n    struct Color = (i32, i32, i32);\n\n}\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Printing structs directly by using ",(0,a.kt)("inlineCode",{parentName:"p"},"#[derive(Debug)]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"{:#?}"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"{:?}"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug)]\nstruct User {\n    username : String,\n    email : String,\n    active : bool,\n    sign_in_count : u64\n}\n\nfn main()\n{\n    let user1 = build_user(String::from("abc"), String::from("abc@gmail.com"));\n    println!("{:#?}",user1);\n}\n\nfn build_user(username : String, email : String) -> User{\n    User{\n        username,\n        email,\n        sign_in_count : 1,\n        active : true\n    }\n}\n')),(0,a.kt)("p",null,"The output will be"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'User {\n    username: "abc",\n    email: "abc@gmail.com",\n    active: true,\n    sign_in_count: 1,\n}\n')),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"method-in-struct"},"Method in Struct"),(0,a.kt)("p",null,"In rust methods are functions implemented for struct. Method are similar to functions except they are tied to an instance to struct.  "),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"implemntation block is used to create methods for struct."),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"when first parameter is self its called method otherwise associative function")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug)]\nstruct Rectangle{\n    length : u32,\n    breadth : u32\n}\n\nimpl Rectangle{\n    fn area(&self) -> u32{\n        self.length * self.breadth;\n    }\n}\n\nfn main()\n{\n    let rect = Rectangle{\n        length : 10,\n        breadth : 5\n    }\n    println!("The are of rectangle is {}",rect.area()); \n}\n')),(0,a.kt)("p",null,"Now will create methods with extra parameter to accept reference of same struct."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug)]\nstruct Rectangle{\n    length : u32,\n    breadth : u32\n}\n\nimpl Rectangle{\n    fn area(&self) -> u32{\n        self.length * self.breadth\n    }\n\n    fn can_hold(&self, rect : &Rectangle) -> bool{\n        self.length >= rect.length && self.breadth >= rect.breadth\n    }\n}\n\nfn main()\n{\n    let rect = Rectangle{\n        length : 10,\n        breadth : 5\n    }\n    println!("The are of rectangle is {}",rect.area()); \n}\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"We can have multiple implementation block of same struct.")),(0,a.kt)("h2",{id:"associative-function-in-struct"},"Associative function in struct."),(0,a.kt)("p",null,"These are called by ",(0,a.kt)("inlineCode",{parentName:"p"},"::"),".\nThe example to demonstrate it is."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug)]\nstruct Rectangle{\n    length : u32,\n    breadth : u32\n}\n\nimpl Rectangle{\n    fn area(&self) -> u32{\n        self.length * self.breadth\n    }\n    fn square(size : u32) -> Rectangle {\n        Rectangle{\n            length : size,\n            breadth : size\n        }\n    }\n}\n\nfn main()\n{\n    let sq = Rectangle::square(5);\n    println!("{:#?}",sq);\n}\n')))}p.isMDXComponent=!0}}]);